package chat

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"unrealbot/cmd/bot"
	"unrealbot/internal/utils"

	tele "gopkg.in/telebot.v4"
)

// NewMessageHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessageHandler(bot *bot.UnrealBot) *Handler {
	return &Handler{bot: bot}
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *Handler) HandleMessage(ctx tele.Context) error {
	message := ctx.Message().Text

	payload := map[string]interface{}{
		"messages": []map[string]interface{}{
			{
				"role":    "user",
				"content": message,
			},
		},
		"is_sync": true,
	}

	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %w", err)
	}

	req, err := createPostRequest(h.bot.APIUrl, h.bot.APIToken, payloadBytes)
	if err != nil {
		return err
	}
	ctx.Notify("typing")
	res, err := sendRequest(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return fmt.Errorf("–æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: %s", res.Status)
	}

	body, err := io.ReadAll(res.Body)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç: %w", err)
	}

	apiResponse, err := parseAPIResponse(body)
	if err != nil {
		return err
	}

	answerContent := findAssistantMessage(apiResponse)
	if answerContent == "" {
		return handleNoAnswer(ctx)
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Ç—Ä–æ–∫—É
	promoMessage := GetPromoString()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º—É
	return ctx.Send(utils.SumStrings(answerContent, promoMessage))
}

// createPostRequest —Å–æ–∑–¥–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å –∫ API
func createPostRequest(apiURL, apiKey string, payload []byte) (*http.Request, error) {
	parsedURL, err := utils.SanitizeURL(apiURL)
	if err != nil {
		return nil, err
	}
	url := utils.SumStrings(parsedURL, "/networks/o1")
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(payload))

	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Authorization", utils.SumStrings("Bearer ", apiKey))

	return req, nil
}

// sendRequest –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
func sendRequest(req *http.Request) (*http.Response, error) {
	return http.DefaultClient.Do(req)
}

// parseApiResponse –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É GenAIApiResponse
func parseAPIResponse(body []byte) (*GenAIApiResponse, error) {
	var apiResponse GenAIApiResponse
	if err := json.Unmarshal(body, &apiResponse); err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
	}
	return &apiResponse, nil
}

// findAssistantMessage –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ API-–æ—Ç–≤–µ—Ç–µ
func findAssistantMessage(apiResponse *GenAIApiResponse) string {
	for _, choice := range apiResponse.Response {
		if choice.Message.Role == "assistant" {
			return choice.Message.Content
		}
	}
	return ""
}

// handleNoAnswer –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
func handleNoAnswer(ctx tele.Context) error {
	if err := ctx.Send("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... üòû"); err != nil {
		return fmt.Errorf("–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: %w", err)
	}
	return nil
}
