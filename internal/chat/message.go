package chat

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"unrealbot/cmd/bot"

	tele "gopkg.in/telebot.v3"
)

// –°—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
var promoStrings = [10]string{
	"\n\n------\n\nüí•üì¢ The Absolute Basstards - Drum&Bass label.\nhttps://t.me/+bS_eIEhkLuZkMDYy",
	"",
	"",
	"",
	"",
	"",
	"",
	"",
	"",
	"",
}

// NewMessageHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessageHandler(bot *bot.UnrealBot) *Handler {
	return &Handler{bot: bot}
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *Handler) HandleMessage(ctx tele.Context) error {
	message := ctx.Message().Text

	payload := map[string]interface{}{
		"messages": []map[string]interface{}{
			{
				"role": "user",
				"content": []map[string]interface{}{
					{
						"type": "text",
						"text": message,
					},
				},
			},
		},
		"is_sync": true,
		"model":   "gpt-4o-2024-05-13",
	}

	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %w", err)
	}

	req, err := createPostRequest(h.bot.GenAPIUrl, h.bot.GenAPIKey, payloadBytes)
	if err != nil {
		return err
	}
	ctx.Notify("typing")
	res, err := sendRequest(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return fmt.Errorf("–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: %s", res.Status)
	}

	body, err := io.ReadAll(res.Body)
	if err != nil {
		return fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç: %w", err)
	}

	apiResponse, err := parseAPIResponse(body)
	if err != nil {
		return err
	}

	answerContent := findAssistantMessage(apiResponse)
	if answerContent == "" {
		return handleNoAnswer(ctx)
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Ç—Ä–æ–∫—É
	randomIndex := rand.Intn(len(promoStrings))
	promoMessage := promoStrings[randomIndex]

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º—É
	return ctx.Send(answerContent + promoMessage)
}

// createPostRequest —Å–æ–∑–¥–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å –∫ API
func createPostRequest(url, apiKey string, payload []byte) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(payload))
	if err != nil {
		return nil, fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Authorization", "Bearer "+apiKey)

	return req, nil
}

// sendRequest –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
func sendRequest(req *http.Request) (*http.Response, error) {
	return http.DefaultClient.Do(req)
}

// parseApiResponse –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É GenAIApiResponse
func parseAPIResponse(body []byte) (*GenAIApiResponse, error) {
	var apiResponse GenAIApiResponse
	if err := json.Unmarshal(body, &apiResponse); err != nil {
		return nil, fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
	}
	return &apiResponse, nil
}

// findAssistantMessage –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ API-–æ—Ç–≤–µ—Ç–µ
func findAssistantMessage(apiResponse *GenAIApiResponse) string {
	for _, choice := range apiResponse.Choices {
		if choice.Message.Role == "assistant" {
			return choice.Message.Content
		}
	}
	return ""
}

// handleNoAnswer –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
func handleNoAnswer(ctx tele.Context) error {
	if err := ctx.Send("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... :("); err != nil {
		return fmt.Errorf("–û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: %w", err)
	}

	if err := ctx.Send(ctx.Sender().ID); err != nil {
		return fmt.Errorf("failed to send user ID: %w", err)
	}

	return nil
}

// CozeMessageHandler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Coze
// func (bot *UnrealBot) CozeMessageHandler(ctx tele.Context) error {
// 	ctx.Notify("typing")
// 	message := ctx.Message().Text
// 	userID := ctx.Sender().ID
// 	url := bot.APIUrl

// 	payload := map[string]interface{}{
// 		"bot_id": bot.BotID,
// 		"user":   string(rune(userID)),
// 		"query":  message,
// 		"stream": false,
// 	}

// 	payloadBytes, err := json.Marshal(payload)
// 	if err != nil {
// 		return fmt.Errorf("–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞: %w", err)
// 	}

// 	req, err := http.NewRequest("POST", url, bytes.NewBuffer(payloadBytes))
// 	if err != nil {
// 		return fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
// 	}

// 	req.Header.Set("Content-Type", "application/json")
// 	req.Header.Set("User-Agent", "insomnia/9.2.0")
// 	req.Header.Set("Authorization", "Bearer "+bot.APIToken)

// 	ctx.Notify("typing")

// 	res, err := http.DefaultClient.Do(req)
// 	if err != nil {
// 		return fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
// 	}
// 	defer res.Body.Close()

// 	if res.StatusCode != http.StatusOK {
// 		return fmt.Errorf("–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: %s", res.Status)
// 	}

// 	ctx.Notify("typing")

// 	body, err := io.ReadAll(res.Body)
// 	if err != nil {
// 		return fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç: %w", err)
// 	}

// 	var apiResponse CozeAPIResponse
// 	if err := json.Unmarshal(body, &apiResponse); err != nil {
// 		return fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
// 	}

// 	ctx.Notify("typing")

// 	answerContent := ""
// 	for _, msg := range apiResponse.Messages {
// 		if msg.Type == "answer" {
// 			answerContent = msg.Content
// 			break
// 		}
// 	}

// 	if answerContent == "" {
// 		if err := ctx.Send("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... :("); err != nil {
// 			return fmt.Errorf("–û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: %w", err)
// 		}
// 		if err := ctx.Send(ctx.Sender().ID); err != nil {
// 			return fmt.Errorf("failed to send user ID: %w", err)
// 		}
// 		return nil
// 	}

// 	if err := ctx.Send(answerContent); err != nil {
// 		return fmt.Errorf("–û—Ç–≤–µ—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: %w", err)
// 	}

// 	return nil
// }
