package middlewares

import (
	tele "gopkg.in/telebot.v3"
)

// CheckMembership - –º–∏–¥–ª–≤–µ–π—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
func CheckMembership(channelID, adminUserID int64) tele.MiddlewareFunc {
	return func(next tele.HandlerFunc) tele.HandlerFunc {
		return func(c tele.Context) error {

			isMember, err := checkSubscription(channelID, c)
			if err != nil {
				return err
			}

			if !isMember {
				return handleNoAccess(c, adminUserID)
			}

			return next(c)
		}
	}
}

func handleNoAccess(c tele.Context, adminUserID int64) error {
	menu := &tele.ReplyMarkup{ResizeKeyboard: true, OneTimeKeyboard: true}
	btnAccessRequest := menu.Text("üõ°Ô∏è –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø")
	menu.Reply(menu.Row(btnAccessRequest))

	c.Bot().Handle(&btnAccessRequest, func(c tele.Context) error {

		var senderID = c.Sender().Username
		if c.Sender().Username == "" || c.Sender().Username == " " || c.Sender().Username == "null" {
			senderID = string(rune(c.Sender().ID))
			c.ForwardTo(&tele.Chat{ID: adminUserID})
			return c.Send("–£ –≤–∞—Å —Å–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ä–æ–∫–æ–µ –∏–º—è) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @frntbck –Ω–∞–ø—Ä—è–º—É—é.")
		}

		_, err := c.Bot().Send(&tele.User{ID: adminUserID}, "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @"+senderID)
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + err.Error())
		}
		c.Send("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return c.Delete()
	})

	return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @frntbck", menu)
}

func checkSubscription(channelID int64, c tele.Context) (bool, error) {
	user := c.Recipient()
	channel := &tele.Chat{ID: channelID}

	chatMember, err := c.Bot().ChatMemberOf(channel, user)
	if err != nil {
		return false, c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: " + err.Error())
	}

	return isMember(chatMember.Role), nil
}

func isMember(role tele.MemberStatus) bool {
	validRoles := map[tele.MemberStatus]bool{
		tele.Member:        true,
		tele.Administrator: true,
		tele.Creator:       true,
	}
	return validRoles[role]
}
