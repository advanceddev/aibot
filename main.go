package main

import (
	"unrealbot/cmd/bot"
	"unrealbot/config"
	"unrealbot/internal/chat"
	"unrealbot/internal/payments"

	tele "gopkg.in/telebot.v3"
)



type checkoutHandler struct {
	bot *tele.Bot
}

var (
	channelID    int64
	menu         = &tele.ReplyMarkup{ResizeKeyboard: true}
	guestMenu    = &tele.ReplyMarkup{ResizeKeyboard: true}
	emptyMenu    = &tele.ReplyMarkup{RemoveKeyboard: true}
	btnPromo     = menu.URL("üí• The Absolute Basstards", "@tabdnb")
	btnPay       = menu.Text("üì¢ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
	btnSubscribe = menu.Text("üé∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
)

func main() {

	cfg := config.MustLoad()

	channelID = cfg.ChannelID

	unrealBot := bot.UnrealBot{
		APIToken:              cfg.APIToken,
		APIUrl:                cfg.APIUrl,
		Bot:                   bot.InitBot(cfg.BotToken),
		BotID:                 cfg.BotID,
		PaymentProviderAPIKey: cfg.PaymentProviderAPIKey,
	}

	defer unrealBot.Bot.Stop()

	setupMenu()

	registerHandlers(unrealBot)
	unrealBot.Bot.Start()
}

func setupMenu() {
	menu.Reply(
		menu.Row(btnPromo),
	)
	guestMenu.Reply(
		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
		// guestMenu.Row(btnPay),

		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
		guestMenu.Row(btnSubscribe),
	)
}

func registerHandlers(unrealBot bot.UnrealBot) {

	checkoutHandler := payments.NewCheckoutHandler(&unrealBot)
	invoiceHandler := payments.NewInvoiceHandler(&unrealBot)
	messageHandler := chat.NewMessageHandler(&unrealBot)

	// /-- –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
	memberOnly := unrealBot.Bot.Group()

	memberOnly.Use(CheckMembership)

	memberOnly.Handle("/start", func(c tele.Context) error {
		return c.Send("–ü—Ä–∏–≤–µ—Ç, "+c.Sender().FirstName+"! üëã", emptyMenu)
	})

	memberOnly.Handle(tele.OnContact, unrealBot.ContactHandler)
	memberOnly.Handle(tele.OnText, messageHandler.HandleMessage)
	// --/

	unrealBot.Bot.Handle(tele.OnCheckout, checkoutHandler.HandleCheckout)

	unrealBot.Bot.Handle(&btnPay, invoiceHandler.HandleInvoice)

	unrealBot.Bot.Handle(&btnSubscribe, func(c tele.Context) error {
		channel := &tele.Chat{ID: channelID, Type: "privatechannel"}
		link, err := c.Bot().InviteLink(channel)
		if err != nil {
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
		}
		return c.Send(link)
	})

	// /-- –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
	unrealBot.Bot.Handle(tele.OnPayment, func(c tele.Context) error {
		if c.Message().Payment != nil {
			channel := &tele.Chat{ID: channelID, Type: "privatechannel"}
			link, err := c.Bot().InviteLink(channel)
			if err != nil {
				return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
			}
			return c.Send(link)
		}
		return nil
	})
	// --/

}

// --- –ú–∏–¥–ª–≤–µ–π—Ä—ã --- /

// CheckMembership - –º–∏–¥–ª–≤–µ–π—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
func CheckMembership(next tele.HandlerFunc) tele.HandlerFunc {
	return func(c tele.Context) error {
		user := c.Recipient()
		channel := &tele.Chat{ID: channelID}

		chatMember, err := c.Bot().ChatMemberOf(channel, user)

		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: " + err.Error())
		}

		if isMember(chatMember) {
			return next(c)
		}

		// return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", guestMenu)
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @frntbck", emptyMenu)
	}
}

func isMember(chatMember *tele.ChatMember) bool {
	return chatMember.Role == tele.Member || chatMember.Role == tele.Administrator || chatMember.Role == tele.Creator
}

// --/
